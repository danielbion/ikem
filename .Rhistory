x
x = as.matrix(read.table('Agaricus.txt', head = TRUE))
x = normalizarDadosSimbolicos(x)
alvo = rep(1, dim(x)[1])
alvo[c(7, 13, 18, 24)] = 0
x
IKEM_IS_roc = c()
IKEM_IS_rand = c()
while(length(IKEM_IS_rand) < 100){
print(length(IKEM_IS_rand))
tryCatch({
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 10)
# roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# if(roc$AUC < 0.5){
# roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# }
# if(roc$AUC <= 1){
# IKEM_IS_roc = c(IKEM_IS_roc, roc$AUC)
# }
target = gerarAlvo(retorno1$Posteriori)
IKEM_IS_rand = c(IKEM_IS_rand, adjustedRandIndex( target, alvo) )
}, error=function(e){})
}
IKEM_IS_rand
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 10)
# roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# if(roc$AUC < 0.5){
# roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# }
# if(roc$AUC <= 1){
# IKEM_IS_roc = c(IKEM_IS_roc, roc$AUC)
# }
target = gerarAlvo(retorno1$Posteriori)
IKEM_IS_rand = c(IKEM_IS_rand, adjustedRandIndex( target, alvo) )
tryCatch({
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 10)
# roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# if(roc$AUC < 0.5){
# roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# }
# if(roc$AUC <= 1){
# IKEM_IS_roc = c(IKEM_IS_roc, roc$AUC)
# }
target = gerarAlvo(retorno1$Posteriori)
IKEM_IS_rand = c(IKEM_IS_rand, adjustedRandIndex( target, alvo) )
}, error=function(e){})
IKEM_IS_rand
IEM_roc = c()
IEM_rand = c()
while(length(IEM_rand) < 5){
print(length(IEM_rand))
tryCatch({
retorno1 = IEM(x, tipoMatriz = 3, numRep = 3, plot = FALSE)
# roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# if(roc$AUC < 0.5){
# roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# }
# if(roc$AUC <= 1){
# IEM_roc = c(IEM_roc, roc$AUC)
# }
target = gerarAlvo(retorno1$Posteriori)
IEM_rand = c(IEM_rand, adjustedRandIndex( target, alvo) )
}, error=function(e){})
}
IEM_rand
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 5;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 100;
n2 = 100;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
alvo = c(rep(0, dim(class1)[1]), rep(1, dim(class2)[1]))
x_1 = rbind(class1, class2)
x_2 = x_1 + runif(length(alvo), -1, 1)
x = cbind(x_1[,1], x_2[,1], x_1[,2], x_2[,2])
x = normalizarDadosSimbolicos(x)
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
intervalGraph2D(x_interval,y_interval)
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 5;
minY1 = -15+deslocamentoY;
maxY1 = 15+deslocamentoY;
minY2 = -15-deslocamentoY;
maxY2 = 15-deslocamentoY;
n1 = 100;
n2 = 100;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
alvo = c(rep(0, dim(class1)[1]), rep(1, dim(class2)[1]))
x_1 = rbind(class1, class2)
x_2 = x_1 + runif(length(alvo), -1, 1)
x = cbind(x_1[,1], x_2[,1], x_1[,2], x_2[,2])
x = normalizarDadosSimbolicos(x)
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
intervalGraph2D(x_interval,y_interval)
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 25;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 100;
n2 = 100;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
alvo = c(rep(0, dim(class1)[1]), rep(1, dim(class2)[1]))
x_1 = rbind(class1, class2)
x_2 = x_1 + runif(length(alvo), -1, 1)
x = cbind(x_1[,1], x_2[,1], x_1[,2], x_2[,2])
x = normalizarDadosSimbolicos(x)
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
intervalGraph2D(x_interval,y_interval)
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 12;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 100;
n2 = 100;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
alvo = c(rep(0, dim(class1)[1]), rep(1, dim(class2)[1]))
x_1 = rbind(class1, class2)
x_2 = x_1 + runif(length(alvo), -1, 1)
x = cbind(x_1[,1], x_2[,1], x_1[,2], x_2[,2])
x = normalizarDadosSimbolicos(x)
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
intervalGraph2D(x_interval,y_interval)
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 10;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 100;
n2 = 100;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
alvo = c(rep(0, dim(class1)[1]), rep(1, dim(class2)[1]))
x_1 = rbind(class1, class2)
x_2 = x_1 + runif(length(alvo), -1, 1)
x = cbind(x_1[,1], x_2[,1], x_1[,2], x_2[,2])
x = normalizarDadosSimbolicos(x)
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
intervalGraph2D(x_interval,y_interval)
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 7;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 100;
n2 = 100;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
alvo = c(rep(0, dim(class1)[1]), rep(1, dim(class2)[1]))
x_1 = rbind(class1, class2)
x_2 = x_1 + runif(length(alvo), -1, 1)
x = cbind(x_1[,1], x_2[,1], x_1[,2], x_2[,2])
x = normalizarDadosSimbolicos(x)
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
intervalGraph2D(x_interval,y_interval)
IEM_roc = c()
IEM_rand = c()
while(length(IEM_rand) < 100){
print(length(IEM_rand))
tryCatch({
retorno1 = IEM(x, tipoMatriz = 3, numRep = 3, plot = FALSE)
# roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# if(roc$AUC < 0.5){
# roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# }
# if(roc$AUC <= 1){
# IEM_roc = c(IEM_roc, roc$AUC)
# }
target = gerarAlvo(retorno1$Posteriori)
IEM_rand = c(IEM_rand, adjustedRandIndex( target, alvo) )
}, error=function(e){})
}
IEM_rand
IKEM_rand
retorno1 = IKEM(x, maxRep = 50, kernelType = 0, D = 4, plot = FALSE, numRep = 10)
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 7;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 50;
n2 = 50;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
alvo = c(rep(0, dim(class1)[1]), rep(1, dim(class2)[1]))
x_1 = rbind(class1, class2)
x_2 = x_1 + runif(length(alvo), -1, 1)
x = cbind(x_1[,1], x_2[,1], x_1[,2], x_2[,2])
x = normalizarDadosSimbolicos(x)
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
intervalGraph2D(x_interval,y_interval)
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 7;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 50;
n2 = 50;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
alvo = c(rep(0, dim(class1)[1]), rep(1, dim(class2)[1]))
x_1 = rbind(class1, class2)
x_2 = x_1 + runif(length(alvo), -1, 1)
x = cbind(x_1[,1], x_2[,1], x_1[,2], x_2[,2])
x = normalizarDadosSimbolicos(x)
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
intervalGraph2D(x_interval,y_interval)
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 7;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 50;
n2 = 50;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
alvo = c(rep(0, dim(class1)[1]), rep(1, dim(class2)[1]))
x_1 = rbind(class1, class2)
x_2 = x_1 + runif(length(alvo), -1, 1)
x = cbind(x_1[,1], x_2[,1], x_1[,2], x_2[,2])
x = normalizarDadosSimbolicos(x)
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
intervalGraph2D(x_interval,y_interval)
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 7;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 50;
n2 = 50;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
alvo = c(rep(0, dim(class1)[1]), rep(1, dim(class2)[1]))
x_1 = rbind(class1, class2)
x_2 = x_1 + runif(length(alvo), -1, 1)
x = cbind(x_1[,1], x_2[,1], x_1[,2], x_2[,2])
x = normalizarDadosSimbolicos(x)
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
intervalGraph2D(x_interval,y_interval)
IKEM_IS_roc = c()
IKEM_IS_rand = c()
while(length(IKEM_IS_rand) < 1){
print(length(IKEM_IS_rand))
tryCatch({
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 10)
# roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# if(roc$AUC < 0.5){
# roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
# }
# if(roc$AUC <= 1){
# IKEM_IS_roc = c(IKEM_IS_roc, roc$AUC)
# }
target = gerarAlvo(retorno1$Posteriori)
IKEM_IS_rand = c(IKEM_IS_rand, adjustedRandIndex( target, alvo) )
}, error=function(e){})
}
