E.step = function(){
for (i in 1:n)
{
A = c()
B = c()
den = 0
num = c()
for(k in 1:c){
XMinf = c()
XMsup = c()
for(j in 1:p){
infIdx = (2*j) - 1
supIdx = 2*j
XMinf = cbind(XMinf, x[i,infIdx] - theta$media[k,infIdx])
XMsup = cbind(XMsup, x[i,supIdx] - theta$media[k,supIdx])
}
A[k] = XMinf %*% solve(theta$mcov[[k]]) %*% t(XMinf)
B[k] = XMsup %*% solve(theta$mcov[[k]]) %*% t(XMsup)
#A[k] = XMinf %*% ginv(theta$mcov[[k]]) %*% t(XMinf)
#B[k] = XMsup %*% ginv(theta$mcov[[k]]) %*% t(XMsup)
numk = theta$tau[k] * (exp(-1/2 * (A[k]+B[k])/2) / sqrt(((2*pi)^p) * det(theta$mcov[[k]])))
num = cbind(num, numk)
den = den + numk
}
if(is.nan(den)){
cat('DEN == 0')
}
posteriori[i, ] = num/den
}
return(posteriori)
}
M.step = function(){
#tau = apply(posteriori, 2, sum)/n
for(k in 1:c){
theta$tau[k] = sum(posteriori[,k])/n
infSeq =  seq(from = 1, to = pp, by = 2)
num = 0
for(i in 1:n){
a_inf = x[i,infSeq]
a_sup = x[i,infSeq+1]
b_inf = theta$media[k,infSeq]
b_sup = theta$media[k,infSeq+1]
num = num + (posteriori[i,k] * x[i,] * IRBF(a_inf, a_sup, b_inf, b_sup, 1.0))
}
theta$media[k,] = num / sum(posteriori[,k])
}
for(k in 1:c){
mcov = matrix(0, nrow = p, ncol = p)
for (i in 1:n){
m = kernelizedDistance(x, theta$media, i, k)
mcov = mcov + (posteriori[i,k] * m)
}
theta$mcov[[k]] = mcov/(sum(posteriori[,k]))
}
return (theta)
}
kernelizedDistance = function(x, mu, i, k){
m = matrix(0, nrow = p, ncol = p)
infSeq =  seq(from = 1, to = pp, by = 2)
x_inf = x[i,infSeq]
x_sup = x[i,infSeq+1]
mu_inf = mu[k,infSeq]
mu_sup = mu[k,infSeq+1]
for(h in 1:p){
for(j in 1:p){
m[h, j] =  IRBF(x_inf[h], x_sup[h], x_inf[j], x_sup[j], 1.0) -
IRBF(x_inf[h], x_sup[h], mu_inf[j], mu_sup[j], 1.0) -
IRBF(mu_inf[h], mu_sup[h], x_inf[j], x_sup[j], 1.0) +
IRBF(mu_inf[h], mu_sup[h], mu_inf[j], mu_inf[j], 1.0)
}
}
return (m)
}
criterio = function(){
ML = 0.0
for(i in 1:n){
ML = ML + log(max(posteriori[i,]))
}
ML = -ML
return(ML)
}
n = dim(x)[1]
pp = dim(x)[2]
p = pp/2
c=2
epsilon = 0.000001
melhorML = 10000000000;
tau = c(0.5, 0.5)
t = 0
MLatual = 1
MLdepois = -1
# kernelInicial = inicializarK()
posteriori = matrix(0, nrow = n, ncol = c)
# posteriori[,1] = runif(n, 0, 1)
# posteriori[,2] = 1 - posteriori[,1]
retorno = inicializarPosteriori()
posteriori = retorno$Posteriori
theta = retorno$Theta
old_posteriori = posteriori
theta
theta = M.step()
theta
posteriori
posteriori = E.step()
posteriori
theta = M.step()
posteriori = E.step()
posteriori
theta = M.step()
posteriori = E.step()
posteriori
theta = M.step()
posteriori = E.step()
posteriori
theta = M.step()
posteriori = E.step()
posteriori
theta = M.step()
posteriori = E.step()
posteriori
theta = M.step()
posteriori = E.step()
theta = M.step()
posteriori = E.step()
theta = M.step()
posteriori = E.step()
theta = M.step()
posteriori = E.step()
theta = M.step()
posteriori = E.step()
theta = M.step()
posteriori = E.step()
theta = M.step()
posteriori = E.step()
theta = M.step()
posteriori = E.step()
theta = M.step()
posteriori = E.step()
posteriori
for(k in 1:c){
theta$tau[k] = sum(posteriori[,k])/n
infSeq =  seq(from = 1, to = pp, by = 2)
num = 0
for(i in 1:n){
a_inf = x[i,infSeq]
a_sup = x[i,infSeq+1]
b_inf = theta$media[k,infSeq]
b_sup = theta$media[k,infSeq+1]
num = num + (posteriori[i,k] * x[i,] * IRBF(a_inf, a_sup, b_inf, b_sup, 1.0))
}
theta$media[k,] = num / sum(posteriori[,k])
}
k = 1
i = 1
m = kernelizedDistance(x, theta$media, i, k)
m
m = kernelizedDistance(x, theta$media, i, k)
m
i =2
m = kernelizedDistance(x, theta$media, i, k)
m
mcov = matrix(0, nrow = p, ncol = p)
for (i in 1:n){
m = kernelizedDistance(x, theta$media, i, k)
mcov = mcov + (posteriori[i,k] * m)
}
theta$mcov
mcov = matrix(0, nrow = p, ncol = p)
for (i in 1:n){
m = kernelizedDistance(x, theta$media, i, k)
mcov = mcov + (posteriori[i,k] * m)
}
mcov
retorno1 = IKFCM(x, c = 2, m = 0.1, maxRep = 20, monteCarlo = 10)
retorno1 = IKFCM(x, c = 2, m = 0.1, maxRep = 5, monteCarlo = 1)
retorno1
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 3;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 100;
n2 = 100;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 3;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 100;
n2 = 100;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 3;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 100;
n2 = 100;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
# r = a + b*teta
# teta -> uniforme(tetai,tetaf)
# x -> r*cos(teta+teta0)
# y -> r*sin(teta+teta0)
n1 = 50;
n2 = 50;
n = n1 + n2;
nClusters = 2;
a1 = 0;
b1 = 1;
teta0 = 0;
teta1i = 0.2*pi;
teta1f = 1.5*pi;
teta1 = runif(n1, teta1i, teta1f);
r1 = a1 + b1*teta1;
x1 = r1*cos(teta1+teta0);
y1 = r1*sin(teta1+teta0);
a2 = 0;
b2 = 1;
teta0 = pi;
teta2i = 0.2*pi;
teta2f = 1.5*pi;
teta2 = runif(n2, teta2i, teta2f);
r2 = a2 + b2*teta2;
x2 = r2*cos(teta2+teta0);
y2 = r2*sin(teta2+teta0);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 3",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
# r = a + b*teta
# teta -> uniforme(tetai,tetaf)
# x -> r*cos(teta+teta0)
# y -> r*sin(teta+teta0)
n1 = 50;
n2 = 50;
n3 = 50;
n4 = 50;
n = n1 + n2 + n3 + n4;
nClusters = 4;
a1 = 0;
b1 = 1;
teta0 = 1*pi/2;
teta1i = 0.2*pi;
teta1f = 1.5*pi;
teta1 = runif(n1, teta1i, teta1f);
r1 = a1 + b1*teta1;
x1 = r1*cos(teta1+teta0);
y1 = r1*sin(teta1+teta0);
a2 = 0;
b2 = 1;
teta0 = 2*pi/2;
teta2i = 0.2*pi;
teta2f = 1.5*pi;
teta2 = runif(n2, teta2i, teta2f);
r2 = a2 + b2*teta2;
x2 = r2*cos(teta2+teta0);
y2 = r2*sin(teta2+teta0);
a3 = 0;
b3 = 1;
teta0 = 3*pi/2;
teta3i = 0.2*pi;
teta3f = 1.5*pi;
teta3 = runif(n3, teta3i, teta3f);
r3 = a3 + b3*teta3;
x3 = r3*cos(teta3+teta0);
y3 = r3*sin(teta3+teta0);
a4 = 0;
b4 = 1;
teta0 = 4*pi/2;
teta4i = 0.2*pi;
teta4f = 1.5*pi;
teta4 = runif(n4, teta4i, teta4f);
r4 = a4 + b4*teta4;
x4 = r4*cos(teta4+teta0);
y4 = r4*sin(teta4+teta0);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
class3 = cbind(x3,y3);
class4 = cbind(x4,y4);
synthetic = rbind(class1,class2,class3,class4);
plot(synthetic,main="Dataset 4",xlab="x", ylab="y",pch=(rep(2:5, c(n1,n2,n3,n4))),col=(rep(1:4, c(n1,n2,n3,n4))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2","Class 3","Class 4"),col=1:4,pch=2:5)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference[n1+n2+1:n3,1] = rep(3,n3);
reference[n1+n2+n3+1:n4,1] = rep(4,n4);
reference = as.vector(reference);
# r = a + b*teta
# teta -> uniforme(tetai,tetaf)
# x -> r*cos(teta+teta0)
# y -> r*sin(teta+teta0)
n1 = 50;
n2 = 50;
n = n1 + n2;
nClusters = 2;
a1 = 0;
b1 = 1;
teta0 = 0;
teta1i = 0.2*pi;
teta1f = 1.5*pi;
teta1 = runif(n1, teta1i, teta1f);
r1 = a1 + b1*teta1;
x1 = r1*cos(teta1+teta0);
y1 = r1*sin(teta1+teta0);
a2 = 0;
b2 = 1;
teta0 = pi;
teta2i = 0.2*pi;
teta2f = 1.5*pi;
teta2 = runif(n2, teta2i, teta2f);
r2 = a2 + b2*teta2;
x2 = r2*cos(teta2+teta0);
y2 = r2*sin(teta2+teta0);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 3",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
# r = a + b*teta
# teta -> uniforme(tetai,tetaf)
# x -> r*cos(teta+teta0)
# y -> r*sin(teta+teta0)
n1 = 20;
n2 = 20;
n = n1 + n2;
nClusters = 2;
a1 = 0;
b1 = 1;
teta0 = 0;
teta1i = 0.2*pi;
teta1f = 1.5*pi;
teta1 = runif(n1, teta1i, teta1f);
r1 = a1 + b1*teta1;
x1 = r1*cos(teta1+teta0);
y1 = r1*sin(teta1+teta0);
a2 = 0;
b2 = 1;
teta0 = pi;
teta2i = 0.2*pi;
teta2f = 1.5*pi;
teta2 = runif(n2, teta2i, teta2f);
r2 = a2 + b2*teta2;
x2 = r2*cos(teta2+teta0);
y2 = r2*sin(teta2+teta0);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 3",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
class1
class2
#y = a + b*sin(c*x + d)
#a -> minY
#b -> (maxY-minY)
#c -> (2*pi)/(maxX - minX)
#d -> 0
minX1 = 0;
maxX1 = 10;
minX2 = 0;
maxX2 = 10;
deslocamentoY = 3;
minY1 = -5+deslocamentoY;
maxY1 = 5+deslocamentoY;
minY2 = -5-deslocamentoY;
maxY2 = 5-deslocamentoY;
n1 = 100;
n2 = 100;
n = n1 + n2;
nClusters = 2;
x1 = runif(n1, minX1, maxX1);
fatorX1 = (2*pi)/(maxX1 - minX1);
y1 = minY1+ (maxY1-minY1)*sin(fatorX1*x1);
x2 = runif(n2, minX2, maxX2);
fatorX2 = (2*pi)/(maxX2 - minX2);
y2 = minY2+ (maxY2-minY2)*sin(fatorX2*x2);
class1 = cbind(x1,y1);
class2 = cbind(x2,y2);
synthetic = rbind(class1,class2);
plot(synthetic,main="Dataset 2",xlab="x",pch=(rep(2:3, c(n1,n2))),col=(rep(1:2, c(n1,n2))),asp=1)
legend("topleft", inset=.02, legend=c("Class 1", "Class 2"),col=1:2,pch=2:3)
reference = matrix(0,n,1);
reference[1:n1,1] = rep(1,n1);
reference[n1+1:n2,1] = rep(2,n2);
reference = as.vector(reference);
x = cbind(class1, class1, class2, class2)
x
retorno1 = IEM(x, tipoMatriz = 3, numRep = 1, plot = TRUE)
roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
if(roc$AUC < 0.5){
roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
}
retorno1 = IEM(x, tipoMatriz = 3, numRep = 1, plot = true)
retorno1 = IEM(x, tipoMatriz = 3, numRep = 1, plot = TRUE)
retorno1 = IEM(x, tipoMatriz = 3, numRep = 1, plot = TRUE)
retorno1 = IEM(x, tipoMatriz = 3, numRep = 1, plot = TRUE)
retorno1 = IEM(x, tipoMatriz = 3, numRep = 1, plot = TRUE)
retorno1 = IKFCM(x, c = 2, m = 0.1, maxRep = 20, monteCarlo = 10)
x
class1
x = rbind(class1, class2)
x
x = cbind(x, x)
x
retorno1 = IEM(x, tipoMatriz = 3, numRep = 1, plot = TRUE)
retorno1 = IEM(x, tipoMatriz = 3, numRep = 1, plot = TRUE)
retorno1 = IEM(x, tipoMatriz = 3, numRep = 1, plot = TRUE)
x = rbind(class1, class2)
x
x[,3] = x[,2]
x
y = cbind(x[,1], x[,1], x[,2], x[,2])
y
x = y
retorno1 = IEM(x, tipoMatriz = 3, numRep = 1, plot = TRUE)
retorno1 = IKFCM(x, c = 2, m = 0.1, maxRep = 20, monteCarlo = 1)
retorno1 = IKEM(x, maxRep = 5, kernelType = 0, D = 10, plot = TRUE, numRep = 1)
retorno1 = IKEMIS(x, repPerIteration = 5, plot = FALSE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 5, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 10)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 10)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 10)
retorno1$Posteriori
