casos = 100
armarios = matrix(c(0,0,1,1,0,1), 3, 2, byrow = TRUE)
armariosIdx = floor(runif(casos) * 3) + 1
gavetasIdx = floor(runif(casos) * 2) + 1
espaco = 0
sucesso = 0
i = 1
armarios[armariosIdx[i], gavetasIdx[i]] == 0
gavetasIdx[i] == 0
outra = 1
casos = 100
armarios = matrix(c(0,0,1,1,0,1), 3, 2, byrow = TRUE)
armariosIdx = floor(runif(casos) * 3) + 1
gavetasIdx = floor(runif(casos) * 2) + 1
espaco = 0
sucesso = 0
for(i in 1:casos){
if(armarios[armariosIdx[i], gavetasIdx[i]] == 0){
espaco = espaco + 1
if(gavetasIdx[i] == 1){
outra = 2
}else{
outra = 1
}
if(armarios[armariosIdx[i], gavetasIdx[outra]] == 1){
sucesso = sucesso + 1
}
}
}
sucesso
espaco
i = 1
espaco = 0
sucesso = 0
armarios[armariosIdx[i], gavetasIdx[i]] == 0
espaco = espaco + 1
outra
outra = 0
if(gavetasIdx[i] == 1){
outra = 2
}else{
outra = 1
}
outra
gavetasIdx[outra]
armarios[armariosIdx[i], gavetasIdx[outra]]
armarios[armariosIdx[i], gavetasIdx[i]]
i
outra
gavetasIdx[i]
casos = 100
armarios = matrix(c(0,0,1,1,0,1), 3, 2, byrow = TRUE)
armariosIdx = floor(runif(casos) * 3) + 1
gavetasIdx = floor(runif(casos) * 2) + 1
espaco = 0
sucesso = 0
for(i in 1:casos){
if(armarios[armariosIdx[i], gavetasIdx[i]] == 0){
espaco = espaco + 1
if(gavetasIdx[i] == 1){
outra = 2
}else{
outra = 1
}
if(armarios[armariosIdx[i], outra] == 1){
sucesso = sucesso + 1
}
}
}
casos
outra
espaco
sucesso
sucesso/espaco
casos = 10000
armarios = matrix(c(0,0,1,1,0,1), 3, 2, byrow = TRUE)
armariosIdx = floor(runif(casos) * 3) + 1
gavetasIdx = floor(runif(casos) * 2) + 1
espaco = 0
sucesso = 0
for(i in 1:casos){
if(armarios[armariosIdx[i], gavetasIdx[i]] == 0){
espaco = espaco + 1
if(gavetasIdx[i] == 1){
outra = 2
}else{
outra = 1
}
if(armarios[armariosIdx[i], outra] == 1){
sucesso = sucesso + 1
}
}
}
casos = 10000
armarios = matrix(c(0,0,1,1,0,1), 3, 2, byrow = TRUE)
armariosIdx = floor(runif(casos) * 3) + 1
gavetasIdx = floor(runif(casos) * 2) + 1
espaco = 0
sucesso = 0
for(i in 1:casos){
if(armarios[armariosIdx[i], gavetasIdx[i]] == 0){
espaco = espaco + 1
if(gavetasIdx[i] == 1){
outra = 2
}else{
outra = 1
}
if(armarios[armariosIdx[i], outra] == 1){
sucesso = sucesso + 1
}
}
}
print(sucesso/espaco)
casos = 10000
armarios = matrix(c(0,0,1,1,0,1), 3, 2, byrow = TRUE)
armariosIdx = floor(runif(casos) * 3) + 1
gavetasIdx = floor(runif(casos) * 2) + 1
espaco = 0
sucesso = 0
for(i in 1:casos){
if(armarios[armariosIdx[i], gavetasIdx[i]] == 0){
espaco = espaco + 1
if(gavetasIdx[i] == 1){
outra = 2
}else{
outra = 1
}
if(armarios[armariosIdx[i], outra] == 1){
sucesso = sucesso + 1
}
}
}
print(sucesso/espaco)
casos = 10000
armarios = matrix(c(0,0,1,1,0,1), 3, 2, byrow = TRUE)
armariosIdx = floor(runif(casos) * 3) + 1
gavetasIdx = floor(runif(casos) * 2) + 1
espaco = 0
sucesso = 0
for(i in 1:casos){
if(armarios[armariosIdx[i], gavetasIdx[i]] == 0){
espaco = espaco + 1
if(gavetasIdx[i] == 1){
outra = 2
}else{
outra = 1
}
if(armarios[armariosIdx[i], outra] == 1){
sucesso = sucesso + 1
}
}
}
print(sucesso/espaco)
casos = 10000
armarios = matrix(c(0,0,1,1,0,1), 3, 2, byrow = TRUE)
armariosIdx = floor(runif(casos) * 3) + 1
gavetasIdx = floor(runif(casos) * 2) + 1
espaco = 0
sucesso = 0
for(i in 1:casos){
if(armarios[armariosIdx[i], gavetasIdx[i]] == 0){
espaco = espaco + 1
if(gavetasIdx[i] == 1){
outra = 2
}else{
outra = 1
}
if(armarios[armariosIdx[i], outra] == 1){
sucesso = sucesso + 1
}
}
}
print(sucesso/espaco)
sucesso/100
sucesso
sucesso/casos
armariosIdx
casos = 10
armarios = matrix(c(0,0,1,1,0,1), 3, 2, byrow = TRUE)
armariosIdx = floor(runif(casos) * 3) + 1
gavetasIdx = floor(runif(casos) * 2) + 1
armariosIdx
gavetasIdx
casos = 10000
armarios = matrix(c(0,0,1,1,0,1), 3, 2, byrow = TRUE)
armariosIdx = floor(runif(casos) * 3) + 1
gavetasIdx = floor(runif(casos) * 2) + 1
espaco = 0
sucesso = 0
for(i in 1:casos){
if(armarios[armariosIdx[i], gavetasIdx[i]] == 0){
espaco = espaco + 1
if(gavetasIdx[i] == 1){
outra = 2
}else{
outra = 1
}
if(armarios[armariosIdx[i], outra] == 1){
sucesso = sucesso + 1
}
}
}
print(sucesso/espaco)
sucesso/casos
2/3
1/6
espaco/casos
armarios[armariosIdx, gavetasIdx]
espaco
casos
espaco/casos
espaco/casos
150/300
100/300
50/300
0.5 * 0.33
0.3333*0.16666
aov
?aov
criterio1_1 = c(
0.8756,0.7530,0.9668,0.9773,0.9625,0.9712,0.8662,0.9120,0.7685,0.9362,0.9770,0.7372,
0.9714,0.8573,0.9797,0.9595,0.9663,0.9191,0.6500,0.9727,0.9398,0.9859,0.9244,0.9030,
0.9731,0.5716,0.9387,0.9740,0.9400,0.9660,0.9885,0.7556,0.9595,0.9729,0.9800,0.8966,
0.9501,0.8402,0.9121,0.8635,0.9566,0.9429,0.8381,0.9701,0.9905,0.8010,0.9676,0.9071,
0.7914,0.8818,0.9153,0.9375,0.6752,0.8857,0.7115,0.7820,0.9628,0.9104,0.9734,0.9564,
0.9455,0.8576,0.9903,0.9323,0.9441,0.8692,0.9477,0.9645,0.5738,0.8757,0.9668,0.6657,
0.9077,0.8963,0.9591,0.9018,0.9530,0.8759,0.9804,0.9678,0.6152,0.9765,0.9951,0.9208,
0.9703,0.9195,0.9974,0.9392,0.9311,0.6605,0.9854,0.5865,0.9851,0.9285,0.9775,0.7010,
0.7602,0.9559,0.8428,0.9211)
criterio1_2 = c(
0.9588,0.9031,0.9411,0.9568,0.9798,0.9314,0.9553,0.9927,0.9757,0.9973,0.9805,0.9762,
0.9962,0.8712,0.8797,0.9244,0.9070,0.9639,0.9895,0.8996,0.9680,0.9891,0.9733,0.9675,
0.9515,0.9746,0.9951,0.9788,0.9796,0.9510,1.0000,0.9302,0.9763,0.9926,0.9723,0.9814,
0.9606,0.9160,0.9982,0.9989,0.9189,0.8078,0.9900,0.8935,0.8376,0.8469,0.9415,1.0000,
0.9802,0.9797,0.9880,0.9797,0.9780,0.8971,0.6806,0.9731,0.9998,0.9984,0.9904,0.9990,
0.9123,0.6853,0.9470,0.9194,0.8655,0.9723,0.9887,0.9452,0.6707,0.9882,0.9100,0.9369,
0.9733,1.0000,0.9607,0.9761,0.9224,0.8786,0.9596,0.9640,0.9386,0.9340,0.9809,0.9033,
0.9837,0.9375,0.9694,0.9801,0.9918,0.9654,0.9342,0.9512,1.0000,0.9694,0.9877,0.9802,
0.8219,0.9404,0.9703,0.9914)
criterio1_3 = c(
0.6843,0.6277,0.5575,0.5779,0.5509,0.5324,0.5023,0.5014,0.5329,0.5662,0.8853,0.5386,
0.5149,0.5338,0.6052,0.8542,0.5752,0.5615,0.5227,0.6069,0.5355,0.5012,0.5577,0.5130,
0.6078,0.5597,0.7955,0.8641,0.5972,0.5135,0.5964,0.5215,0.5777,0.5333,0.5515,0.6195,
0.5571,0.5565,0.5203,0.5506,0.5291,0.5583,0.5866,0.5069,0.5865,0.5071,0.5119,0.5612,
0.6268,0.5147,0.5343,0.5772,0.5360,0.6042,0.7469,0.5414,0.6275,0.5137,0.5207,0.5594,
0.5724,0.5266,0.5893,0.6095,0.5015,0.5776,0.5685,0.5232,0.5806,0.6004,0.5287,0.5167,
0.5907,0.5211,0.5343,0.6705,0.5704,0.5706,0.5547,0.5256,0.5335,0.5367,0.6168,0.5475,
0.5101,0.5058,0.6605,0.5142,0.6427,0.5167,0.5615,0.6395,0.5306,0.5826,0.6207,0.5528,
0.5584,0.5996,0.5131,0.5104)
y = cbind(criterio1_1, criterio1_2, criterio1_3)
fit = manova(y ~ A+B)
RoundingTimes <-
matrix(c(5.40, 5.50, 5.55,
5.85, 5.70, 5.75,
5.20, 5.60, 5.50,
5.55, 5.50, 5.40,
5.90, 5.85, 5.70,
5.45, 5.55, 5.60,
5.40, 5.40, 5.35,
5.45, 5.50, 5.35,
5.25, 5.15, 5.00,
5.85, 5.80, 5.70,
5.25, 5.20, 5.10,
5.65, 5.55, 5.45,
5.60, 5.35, 5.45,
5.05, 5.00, 4.95,
5.50, 5.50, 5.40,
5.45, 5.55, 5.50,
5.55, 5.55, 5.35,
5.45, 5.50, 5.55,
5.50, 5.45, 5.25,
5.65, 5.60, 5.40,
5.70, 5.65, 5.55,
6.30, 6.30, 6.25),
nrow = 22,
byrow = TRUE,
dimnames = list(1 : 22,
c("Round Out", "Narrow Angle", "Wide Angle")))
RoundingTimes
friedman.test(RoundingTimes)
wb <- aggregate(warpbreaks$breaks,
by = list(w = warpbreaks$wool,
t = warpbreaks$tension),
FUN = mean)
wb
friedman.test(wb$x, wb$w, wb$t)
friedman.test(x ~ w | t, data = wb)
y
friedman.test(y)
?friedman.test
criterio2_1 = c(
0.9856,0.5495,0.9996,1.0000,0.5238,1.0000,1.0000,0.8322,1.0000,0.9111,1.0000,1.0000,
0.9548,0.6568,0.7675,0.5156,0.7462,0.6046,0.7123,0.6656,0.9908,1.0000,0.9544,0.5520,
0.8228,0.5852,0.9861,0.9839,0.7075,1.0000,1.0000,0.5127,1.0000,0.9419,0.8172,0.7604,
1.0000,0.6577,1.0000,0.6015,1.0000,1.0000,0.6972,0.8651,0.9923,0.9873,0.5283,1.0000,
0.7738,0.7353,0.7748,1.0000,0.8988,0.6748,1.0000,1.0000,0.8913,0.7296,0.7431,0.7881,
0.5800,0.9695,0.9365,0.6018,0.9179,0.9292,0.7166,0.5040,0.9652,0.8431,1.0000,0.5044,
0.7038,0.9914,1.0000,0.9955,0.9355,0.5413,0.5174,0.9863,0.9841,0.5512,1.0000,0.7043,
0.7024,0.7456,0.6479,1.0000,0.9641,1.0000,0.7872,0.5588,0.5148,0.6216,1.0000,0.8618,
0.5134,0.9989,0.9854,0.9478)
y = cbind(criterio1_1, criterio1_2, criterio2_1)
friedman.test(y)
y
mean(y[,1])
mean(y[,2])
mean(y[,3])
y = cbind(criterio1_1, criterio1_1, criterio2_1)
friedman.test(y)
runif()
runif(1)
runif(1) * 0.5
runif(1) * 0.5
runif(1) * 0.05
runif(1) * 0.05
runif(1) * 0.05
runif(1) * 0.05
runif(1) * 0.05
runif(1) * 0.05
runif(1) * 0.03
runif(1) * 0.03
runif(10) * 0.03
runif(10) * 0.03
runif(10) * 0.03
setwd("C:/bitbucket/ikem")
source("functions_sda.r")
library('MASS')
library('Epi')
library('mclust')
source("Interval_EM.r")
source("IKEM_IS.r")
source("Interval_Kernel_EM.r")
source('Interval_Kernel_Fuzzy_C-Means.r')
getData = function(base, scenario){
return(
switch(base,
switch(scenario,
base1(n1=20, n2=20, var1=3, var2=3, range1=2, range2=2, offset2=c(10,5)),
base1(100, 100, 3, 1, 2, 2, c(10,5)),
base1(20, 20, 3, 3, 5, 1, c(0, 0))
),
switch(scenario,
base2(n1=300, n2=80, var2=0.1, range1=0.5, range2=0.5, offset2=c(-1.5, 1.5)),
base2(n1=300, n2=80, var2=0.1, range1=0.5, range2=0.5, offset2=c(-2, 2)),
base2(n1=300, n2=80, var2=0.1, range1=0.2, range2=0.5, offset2=c(-2, 2))
),
switch(scenario,
base3(n1 = 100, n2=80, range1=1, range2=1, var1=0.3),
base3(n1 = 100, n2=80, range1=1, range2=0.5, var1=0.4),
base3(n1 = 100, n2=80, range1=1, range2=0.5, var1=0.8)
),
))
}
data1 = getData(1,1)
x = data1[[1]]
alvo = data1[[2]]
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
if(roc$AUC < 0.5){
roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
}
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 1)
setwd("C:/bitbucket/ikem")
source("functions_sda.r")
library('MASS')
library('Epi')
library('mclust')
source("Interval_EM.r")
source("IKEM_IS.r")
source("Interval_Kernel_EM.r")
source('Interval_Kernel_Fuzzy_C-Means.r')
setwd("C:/bitbucket/ikem")
source("functions_sda.r")
library('MASS')
library('Epi')
library('mclust')
source("Interval_EM.r")
source("IKEM_IS.r")
source("Interval_Kernel_EM.r")
source('Interval_Kernel_Fuzzy_C-Means.r')
x
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
if(roc$AUC < 0.5){
roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
}
retorno1$Posteriori
data1 = getData(1,3)
x = data1[[1]]
alvo = data1[[2]]
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
x = as.matrix(read.table('temperatura.txt'))
x = x[-c(19,37),]
x = normalizarDadosSimbolicos(x)
alvo = rep(1, dim(x)[1])
alvo[c(1,2,8,10,11,14,15,17,20,21,24,25,26,27,28,30,32,33,34,35)] = 2
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
z_interval = interval(x[,5],x[,6])
# intervalGraph3D(x_interval, y_interval, z_interval, alvo = alvo)
alvo[c(1,2,8,10,11,14,15,17,20,21,24,25,26,27,28,30,32,33,34,35)] = 0
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 1)
roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
if(roc$AUC < 0.5){
roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
}
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 1)
roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
if(roc$AUC < 0.5){
roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
}
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 1)
roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
if(roc$AUC < 0.5){
roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
}
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 1)
roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
if(roc$AUC < 0.5){
roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
}
x = as.matrix(read.table('carros.txt', head = TRUE))
x = normalizarDadosSimbolicos(x)
alvo = rep(1, dim(x)[1])
alvo[c(4,11,15,22,23)] = 2
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
z_interval = interval(x[,5],x[,6])
#intervalGraph3D(x_interval, y_interval, z_interval, alvo = alvo)
alvo[c(4,11,15,22,23)] = 0
x = as.matrix(read.table('carros.txt', head = TRUE))
x = normalizarDadosSimbolicos(x)
alvo = rep(1, dim(x)[1])
alvo[c(4,11,15,22,23)] = 2
x_interval = interval(x[,1],x[,2])
y_interval = interval(x[,3],x[,4])
z_interval = interval(x[,5],x[,6])
#intervalGraph3D(x_interval, y_interval, z_interval, alvo = alvo)
alvo[c(4,11,15,22,23)] = 0
retorno1 = IKEMIS(x, repPerIteration = 50, plot = FALSE, iterations = 1)
roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
if(roc$AUC < 0.5){
roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
}
data1 = getData(2,3)
x = data1[[1]]
alvo = data1[[2]]
data1 = getData(3,3)
x = data1[[1]]
alvo = data1[[2]]
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
data1 = getData(3,1)
x = data1[[1]]
alvo = data1[[2]]
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
retorno1$Posteriori
data1 = getData(1,2)
x = data1[[1]]
alvo = data1[[2]]
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 50, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 1, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 1, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 1, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 4, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 40, plot = TRUE, iterations = 1)
retorno1 = IKEMIS(x, repPerIteration = 40, plot = TRUE, iterations = 1)
data1 = getData(1,1)
x = data1[[1]]
alvo = data1[[2]]
data1 = getData(1,1)
x = data1[[1]]
alvo = data1[[2]]
getData = function(base, scenario){
return(
switch(base,
switch(scenario,
base1(n1=100, n2=100, var1=3, var2=3, range1=2, range2=2, offset2=c(10,5)),
base1(100, 100, 3, 1, 2, 2, c(10,5)),
base1(20, 20, 3, 3, 5, 1, c(0, 0))
),
switch(scenario,
base2(n1=300, n2=80, var2=0.1, range1=0.5, range2=0.5, offset2=c(-1.5, 1.5)),
base2(n1=300, n2=80, var2=0.1, range1=0.5, range2=0.5, offset2=c(-2, 2)),
base2(n1=300, n2=80, var2=0.1, range1=0.2, range2=0.5, offset2=c(-2, 2))
),
switch(scenario,
base3(n1 = 100, n2=80, range1=1, range2=1, var1=0.3),
base3(n1 = 100, n2=80, range1=1, range2=0.5, var1=0.4),
base3(n1 = 100, n2=80, range1=1, range2=0.5, var1=0.8)
),
))
}
data1 = getData(1,1)
x = data1[[1]]
alvo = data1[[2]]
retorno1 = IKEMIS(x, repPerIteration = 40, plot = TRUE, iterations = 1)
roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
if(roc$AUC < 0.5){
roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
}
retorno1 = IKEMIS(x, repPerIteration = 40, plot = TRUE, iterations = 1)
roc = ROC(test = retorno1$Posteriori[,1], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
if(roc$AUC < 0.5){
roc = ROC(test = retorno1$Posteriori[,2], stat = alvo, PV = FALSE, MX = FALSE, MI = FALSE, )
}
